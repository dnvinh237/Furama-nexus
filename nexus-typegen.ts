/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  createContractInputType: { // input type
    customer: number; // Int!
    deposit?: string | null; // String
    employee: number; // Int!
    endDate?: string | null; // String
    startDate?: string | null; // String
    totalMoney?: string | null; // String
  }
  createCustomerInputType: { // input type
    address?: string | null; // String
    contracts?: Array<number | null> | null; // [Int]
    dayOfBirth?: string | null; // String
    email?: string | null; // String
    idCard: string; // String!
    name: string; // String!
    phone?: string | null; // String
  }
  createEmployeeInputType: { // input type
    contracts?: Array<number | null> | null; // [Int]
    division: number; // Int!
    educationDegree: number; // Int!
    email: string; // String!
    name: string; // String!
    position: number; // Int!
  }
  deleteContractInputType: { // input type
    id: number; // Int!
  }
  loginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  signupInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
  updateContractInputType: { // input type
    customer?: number | null; // Int
    deposit?: string | null; // String
    employee?: number | null; // Int
    endDate?: string | null; // String
    id: number; // Int!
    startDate?: string | null; // String
    totalMoney?: string | null; // String
  }
  updateCustomerInputType: { // input type
    address?: string | null; // String
    contracts?: Array<number | null> | null; // [Int]
    dayOfBirth?: string | null; // String
    email?: string | null; // String
    id: number; // Int!
    idCard?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
  }
  updateEmployeeInputType: { // input type
    contracts?: Array<number | null> | null; // [Int]
    division?: number | null; // Int
    educationDegree?: number | null; // Int
    email?: string | null; // String
    id: number; // Int!
    name?: string | null; // String
    position?: number | null; // Int
  }
}

export interface NexusGenEnums {
  SearchBy: "endDate" | "startDate"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Contract: { // root type
    createdAt?: string | null; // String
    deposit?: string | null; // String
    endDate?: string | null; // String
    id?: number | null; // Int
    startDate?: string | null; // String
    totalMoney?: string | null; // String
  }
  Customer: { // root type
    address?: string | null; // String
    createdAt?: string | null; // String
    dayOfBirth?: string | null; // String
    email?: string | null; // String
    id?: number | null; // Int
    idCard?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
  }
  Division: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
  }
  EducationDegree: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
  }
  Employee: { // root type
    createdAt?: string | null; // String
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
  }
  MessagePayload: { // root type
    message: string; // String!
  }
  Mutation: {};
  Position: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
  }
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: number | null; // Int
    isAdmin?: boolean | null; // Boolean
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Contract: { // field return type
    createdAt: string | null; // String
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    deposit: string | null; // String
    employee: NexusGenRootTypes['Employee'] | null; // Employee
    endDate: string | null; // String
    id: number | null; // Int
    startDate: string | null; // String
    totalMoney: string | null; // String
  }
  Customer: { // field return type
    address: string | null; // String
    contracts: Array<NexusGenRootTypes['Contract'] | null> | null; // [Contract]
    createdAt: string | null; // String
    dayOfBirth: string | null; // String
    email: string | null; // String
    id: number | null; // Int
    idCard: string | null; // String
    name: string | null; // String
    phone: string | null; // String
  }
  Division: { // field return type
    createdAt: string | null; // String
    employees: Array<NexusGenRootTypes['Employee'] | null> | null; // [Employee]
    id: number | null; // Int
    name: string | null; // String
  }
  EducationDegree: { // field return type
    createdAt: string | null; // String
    employees: Array<NexusGenRootTypes['Employee'] | null> | null; // [Employee]
    id: number | null; // Int
    name: string | null; // String
  }
  Employee: { // field return type
    contracts: Array<NexusGenRootTypes['Contract'] | null> | null; // [Contract]
    createdAt: string | null; // String
    division: NexusGenRootTypes['Division'] | null; // Division
    educationDegree: NexusGenRootTypes['EducationDegree'] | null; // EducationDegree
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    position: NexusGenRootTypes['Position'] | null; // Position
  }
  MessagePayload: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    createContract: NexusGenRootTypes['Contract']; // Contract!
    createCustomer: NexusGenRootTypes['Customer']; // Customer!
    createEmployee: NexusGenRootTypes['Employee']; // Employee!
    deleteContract: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    deleteCustomer: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    deleteEmployee: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    updateContract: NexusGenRootTypes['Contract']; // Contract!
    updateCustomer: NexusGenRootTypes['Customer']; // Customer!
    updateEmployee: NexusGenRootTypes['Employee']; // Employee!
  }
  Position: { // field return type
    createdAt: string | null; // String
    employees: Array<NexusGenRootTypes['Employee'] | null> | null; // [Employee]
    id: number | null; // Int
    name: string | null; // String
  }
  Query: { // field return type
    currentUser: NexusGenRootTypes['User'] | null; // User
    findAllContracts: Array<NexusGenRootTypes['Contract'] | null> | null; // [Contract]
    findAllCustomers: Array<NexusGenRootTypes['Customer'] | null> | null; // [Customer]
    findAllEmployees: Array<NexusGenRootTypes['Employee'] | null> | null; // [Employee]
    findContractById: NexusGenRootTypes['Contract'] | null; // Contract
    findCustomerById: NexusGenRootTypes['Customer'] | null; // Customer
    findEmployeeById: NexusGenRootTypes['Employee'] | null; // Employee
  }
  User: { // field return type
    email: string | null; // String
    id: number | null; // Int
    isAdmin: boolean | null; // Boolean
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Contract: { // field return type name
    createdAt: 'String'
    customer: 'Customer'
    deposit: 'String'
    employee: 'Employee'
    endDate: 'String'
    id: 'Int'
    startDate: 'String'
    totalMoney: 'String'
  }
  Customer: { // field return type name
    address: 'String'
    contracts: 'Contract'
    createdAt: 'String'
    dayOfBirth: 'String'
    email: 'String'
    id: 'Int'
    idCard: 'String'
    name: 'String'
    phone: 'String'
  }
  Division: { // field return type name
    createdAt: 'String'
    employees: 'Employee'
    id: 'Int'
    name: 'String'
  }
  EducationDegree: { // field return type name
    createdAt: 'String'
    employees: 'Employee'
    id: 'Int'
    name: 'String'
  }
  Employee: { // field return type name
    contracts: 'Contract'
    createdAt: 'String'
    division: 'Division'
    educationDegree: 'EducationDegree'
    email: 'String'
    id: 'Int'
    name: 'String'
    position: 'Position'
  }
  MessagePayload: { // field return type name
    message: 'String'
  }
  Mutation: { // field return type name
    createContract: 'Contract'
    createCustomer: 'Customer'
    createEmployee: 'Employee'
    deleteContract: 'MessagePayload'
    deleteCustomer: 'MessagePayload'
    deleteEmployee: 'MessagePayload'
    login: 'AuthPayload'
    signup: 'MessagePayload'
    updateContract: 'Contract'
    updateCustomer: 'Customer'
    updateEmployee: 'Employee'
  }
  Position: { // field return type name
    createdAt: 'String'
    employees: 'Employee'
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    currentUser: 'User'
    findAllContracts: 'Contract'
    findAllCustomers: 'Customer'
    findAllEmployees: 'Employee'
    findContractById: 'Contract'
    findCustomerById: 'Customer'
    findEmployeeById: 'Employee'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    isAdmin: 'Boolean'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createContract: { // args
      data: NexusGenInputs['createContractInputType']; // createContractInputType!
    }
    createCustomer: { // args
      data: NexusGenInputs['createCustomerInputType']; // createCustomerInputType!
    }
    createEmployee: { // args
      data: NexusGenInputs['createEmployeeInputType']; // createEmployeeInputType!
    }
    deleteContract: { // args
      data: NexusGenInputs['deleteContractInputType']; // deleteContractInputType!
    }
    deleteCustomer: { // args
      data: NexusGenInputs['deleteContractInputType']; // deleteContractInputType!
    }
    deleteEmployee: { // args
      data: NexusGenInputs['deleteContractInputType']; // deleteContractInputType!
    }
    login: { // args
      data: NexusGenInputs['loginInput']; // loginInput!
    }
    signup: { // args
      data: NexusGenInputs['signupInput']; // signupInput!
    }
    updateContract: { // args
      data: NexusGenInputs['updateContractInputType']; // updateContractInputType!
    }
    updateCustomer: { // args
      data: NexusGenInputs['updateCustomerInputType']; // updateCustomerInputType!
    }
    updateEmployee: { // args
      data: NexusGenInputs['updateEmployeeInputType']; // updateEmployeeInputType!
    }
  }
  Query: {
    findAllContracts: { // args
      fromDate?: string | null; // String
      searchBy?: NexusGenEnums['SearchBy'] | null; // SearchBy
      skip?: number | null; // Int
      take?: number | null; // Int
      toDate?: string | null; // String
    }
    findAllCustomers: { // args
      searchString?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    findAllEmployees: { // args
      searchString?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    findContractById: { // args
      id: number; // Int!
    }
    findCustomerById: { // args
      id: number; // Int!
    }
    findEmployeeById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}