### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Contract {
  createdAt: String
  customer: Customer
  deposit: String
  employee: Employee
  endDate: String
  id: Int
  startDate: String
  totalMoney: String
}

type Customer {
  address: String
  contracts: [Contract]
  createdAt: String
  dayOfBirth: String
  email: String
  id: Int
  idCard: String
  name: String
  phone: String
}

type Division {
  createdAt: String
  employees: [Employee]
  id: Int
  name: String
}

type EducationDegree {
  createdAt: String
  employees: [Employee]
  id: Int
  name: String
}

type Employee {
  contracts: [Contract]
  createdAt: String
  division: Division
  educationDegree: EducationDegree
  email: String
  id: Int
  name: String
  position: Position
}

type MessagePayload {
  message: String!
}

type Mutation {
  createContract(data: createContractInputType!): Contract!
  createCustomer(data: createCustomerInputType!): Customer!
  createEmployee(data: createEmployeeInputType!): Employee!
  deleteContract(data: deleteContractInputType!): MessagePayload!
  deleteCustomer(data: deleteContractInputType!): MessagePayload!
  deleteEmployee(data: deleteContractInputType!): MessagePayload!
  login(data: loginInput!): AuthPayload!
  signup(data: signupInput!): MessagePayload!
  updateContract(data: updateContractInputType!): Contract!
  updateCustomer(data: updateCustomerInputType!): Customer!
  updateEmployee(data: updateEmployeeInputType!): Employee!
}

type Position {
  createdAt: String
  employees: [Employee]
  id: Int
  name: String
}

type Query {
  currentUser: User
  findAllContracts(fromDate: String, searchBy: SearchBy, skip: Int, take: Int, toDate: String): [Contract]
  findAllCustomers(searchString: String, skip: Int, take: Int): [Customer]
  findAllEmployees(searchString: String, skip: Int, take: Int): [Employee]
  findContractById(id: Int!): Contract
  findCustomerById(id: Int!): Customer
  findEmployeeById(id: Int!): Employee
}

enum SearchBy {
  endDate
  startDate
}

type User {
  email: String
  id: Int
  isAdmin: Boolean
  name: String
}

input createContractInputType {
  customer: Int!
  deposit: String
  employee: Int!
  endDate: String
  startDate: String
  totalMoney: String
}

input createCustomerInputType {
  address: String
  contracts: [Int]
  dayOfBirth: String
  email: String
  idCard: String!
  name: String!
  phone: String
}

input createEmployeeInputType {
  contracts: [Int]
  division: Int!
  educationDegree: Int!
  email: String!
  name: String!
  position: Int!
}

input deleteContractInputType {
  id: Int!
}

input loginInput {
  email: String!
  password: String!
}

input signupInput {
  email: String!
  name: String!
  password: String!
}

input updateContractInputType {
  customer: Int
  deposit: String
  employee: Int
  endDate: String
  id: Int!
  startDate: String
  totalMoney: String
}

input updateCustomerInputType {
  address: String
  contracts: [Int]
  dayOfBirth: String
  email: String
  id: Int!
  idCard: String
  name: String
  phone: String
}

input updateEmployeeInputType {
  contracts: [Int]
  division: Int
  educationDegree: Int
  email: String
  id: Int!
  name: String
  position: Int
}